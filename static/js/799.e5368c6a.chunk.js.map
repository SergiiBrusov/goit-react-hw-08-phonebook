{"version":3,"file":"static/js/799.e5368c6a.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from '../redux/contacts/operations';\nimport { selectError, selectItems } from '../redux/contacts/selectors';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport function ContactForm() {\n  const error = useSelector(selectError);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectItems);\n  const dispatch = useDispatch();\n\n  const id = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const addContacts = ({ name, number }) => {\n    const isExist = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExist) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    addContacts({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n      <form onSubmit={handleSubmit} className=\"container mt-4\">\n        <div className=\"form-group\">\n          <label htmlFor={id}>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            className=\"form-control\"\n            value={name}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor={id}>Number</label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            className=\"form-control\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add Contact\n        </button>\n      </form>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useMemo } from 'react';\nimport { deleteContact } from '../redux/contacts/operations';\nimport {\n  selectItems,\n  selectFilter,\n  selectError,\n} from '../redux/contacts/selectors';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const ContactsList = () => {\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectItems);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = useMemo(() => {\n    if (filter === '') return contacts;\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [contacts, filter]);\n\n  return (\n    <div className=\"container mt-4\">\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n      <ul className=\"list-group\">\n        {filteredContacts.map(contact => (\n          <li\n            key={contact.id}\n            className=\"list-group-item d-flex justify-content-between align-items-center\"\n          >\n            <span>\n              {contact.name}: {contact.number || contact.phone}\n            </span>\n            <button\n              onClick={() => dispatch(deleteContact(contact.id))}\n              className=\"btn btn-danger\"\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../redux/contacts/contactsSlice';\nimport { selectError, selectFilter } from '../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      {error && 'something went wrong'}\n      <h3>Find contacts by name</h3>\n      <input\n        type=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'components/redux/auth/selectors';\nimport { fetchContacts } from 'components/redux/contacts/operations';\nimport { selectError } from 'components/redux/contacts/selectors';\n\nconst Contacts = () => {\n  const error = useSelector(selectError);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <div className=\"container mt-5\">\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1 className=\"mb-4\">Phonebook</h1>\n          <ContactForm />\n        </div>\n        <div className=\"col\">\n          <h2 className=\"mb-3\">Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","error","useSelector","selectError","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","contacts","selectItems","dispatch","useDispatch","handleChange","e","_e$target","target","value","_jsxs","_Fragment","children","_jsx","className","onSubmit","evt","preventDefault","_ref","find","contact","toLowerCase","alert","concat","newContact","addContact","addContacts","htmlFor","type","onChange","required","ContactsList","filter","selectFilter","filteredContacts","useMemo","includes","map","phone","onClick","deleteContact","Filter","setFilter","isLoggedIn","selectIsLoggedIn","useEffect","fetchContacts"],"sourceRoot":""}